(()=>{"use strict";var n={28:(n,e,r)=>{r.d(e,{Z:()=>c});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,'* {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nmain {\r\n  margin: 0 auto;\r\n  max-width: 1000px;\r\n}\r\n\r\nbutton {\r\n  padding: 8px 24px;\r\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 16px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #50c2ff;\r\n  color: #fff;\r\n  font-weight: 700;\r\n  margin: 12px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #84c8ec;\r\n  cursor: pointer;\r\n}\r\n\r\ninput {\r\n  font-size: 18px;\r\n  margin: 0 4px;\r\n  padding: 5px 1px;\r\n}\r\n\r\n.curr-proj-div {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  margin: 48px;\r\n  gap: 12px;\r\n}\r\n\r\n.curr-proj-div h4 {\r\n  grid-column: span 5;\r\n  text-align: center;\r\n  font-size: 48px;\r\n  color: #555;\r\n  text-transform: uppercase;\r\n  margin: 32px 0;\r\n}\r\n\r\n.todo-card {\r\n  background-color: #eee;\r\n  box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 250px;\r\n  font-size: 20px;\r\n  padding: 0px 20px;\r\n  text-align: center;\r\n  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\r\n}\r\n.todo-card h4 {\r\n  font-size: 36px;\r\n}\r\n.todo-card p {\r\n  color: #333;\r\n  margin-bottom: 12px;\r\n}\r\np.todo-prior {\r\n  color: green;\r\n  font-size: 36px;\r\n}\r\n',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,4DAA4D;EAC5D,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,yBAAyB;EACzB,WAAW;EACX,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,sBAAsB;EACtB,4CAA4C;EAC5C,aAAa;EACb,sBAAsB;EACtB,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,kBAAkB;EAClB,6EAA6E;AAC/E;AACA;EACE,eAAe;AACjB;AACA;EACE,WAAW;EACX,mBAAmB;AACrB;AACA;EACE,YAAY;EACZ,eAAe;AACjB",sourcesContent:['* {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nmain {\r\n  margin: 0 auto;\r\n  max-width: 1000px;\r\n}\r\n\r\nbutton {\r\n  padding: 8px 24px;\r\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 16px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: #50c2ff;\r\n  color: #fff;\r\n  font-weight: 700;\r\n  margin: 12px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #84c8ec;\r\n  cursor: pointer;\r\n}\r\n\r\ninput {\r\n  font-size: 18px;\r\n  margin: 0 4px;\r\n  padding: 5px 1px;\r\n}\r\n\r\n.curr-proj-div {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  margin: 48px;\r\n  gap: 12px;\r\n}\r\n\r\n.curr-proj-div h4 {\r\n  grid-column: span 5;\r\n  text-align: center;\r\n  font-size: 48px;\r\n  color: #555;\r\n  text-transform: uppercase;\r\n  margin: 32px 0;\r\n}\r\n\r\n.todo-card {\r\n  background-color: #eee;\r\n  box-shadow: 0 1px 1px 2px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 250px;\r\n  font-size: 20px;\r\n  padding: 0px 20px;\r\n  text-align: center;\r\n  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;\r\n}\r\n.todo-card h4 {\r\n  font-size: 36px;\r\n}\r\n.todo-card p {\r\n  color: #333;\r\n  margin-bottom: 12px;\r\n}\r\np.todo-prior {\r\n  color: green;\r\n  font-size: 36px;\r\n}\r\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(a[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:(n,e,r)=>{var t,o=function(){var n={};return function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}n[e]=r}return n[e]}}(),i=[];function a(n){for(var e=-1,r=0;r<i.length;r++)if(i[r].identifier===n){e=r;break}return e}function c(n,e){for(var r={},t=[],o=0;o<n.length;o++){var c=n[o],d=e.base?c[0]+e.base:c[0],s=r[d]||0,l="".concat(d," ").concat(s);r[d]=s+1;var u=a(l),A={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(i[u].references++,i[u].updater(A)):i.push({identifier:l,updater:m(A,e),references:1}),t.push(l)}return t}function d(n){var e=document.createElement("style"),t=n.attributes||{};if(void 0===t.nonce){var i=r.nc;i&&(t.nonce=i)}if(Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])})),"function"==typeof n.insert)n.insert(e);else{var a=o(n.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var s,l=(s=[],function(n,e){return s[n]=e,s.filter(Boolean).join("\n")});function u(n,e,r,t){var o=r?"":t.media?"@media ".concat(t.media," {").concat(t.css,"}"):t.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}function A(n,e,r){var t=r.css,o=r.media,i=r.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}var p=null,f=0;function m(n,e){var r,t,o;if(e.singleton){var i=f++;r=p||(p=d(e)),t=u.bind(null,r,i,!1),o=u.bind(null,r,i,!0)}else r=d(e),t=A.bind(null,r,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)};return t(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===t&&(t=Boolean(window&&document&&document.all&&!window.atob)),t));var r=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var t=0;t<r.length;t++){var o=a(r[t]);i[o].references--}for(var d=c(n,e),s=0;s<r.length;s++){var l=a(r[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}r=d}}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{const n=function(n="title",e="description",r="due Date",t=1){return{title:n,desc:e,dueDate:r,priority:t,getTitle:()=>n,getDesc:()=>e,getDueDate:()=>r,getPriority:()=>t}},e=function(n){return{title:n,todoList:[],getTitle:()=>n,addTodo(n){this.todoList.push(n)},getTodoList(){return this.todoList}}},t=(()=>{let n;return{getCurrProj:function(){return n},setCurrProj:function(e){n=e}}})(),o=(()=>{const r=document.querySelector(".tabs-nav"),o=document.querySelector("main");let i=[];const a=function(n){i.push(n)},c=function(n){let e=document.createElement("button");e.innerText=n.getTitle(),e.addEventListener("click",(function(){t.setCurrProj(n),s(o),u(t.getCurrProj())})),r.appendChild(e)},d=function(n,e){let r=document.createElement("div"),t=document.createElement("h4"),o=document.createElement("p"),i=document.createElement("p"),a=document.createElement("p");var c;t.innerText=n.getTitle(),o.innerText=n.getDueDate(),i.innerText=n.getDesc(),a.innerText=n.getPriority(),c=a,r.classList.add("todo-card"),c.classList.add("todo-prior"),r.append(t,o,i,a),e.appendChild(r)},s=function(n){for(;n.firstChild;)n.removeChild(n.firstChild)},l=function(){let e=document.createElement("div"),r=document.createElement("input"),i=document.createElement("input"),a=document.createElement("input"),c=document.createElement("input"),s=document.createElement("button");s.innerText="confirm",s.addEventListener("click",(()=>{let e=n(r.value,i.value,a.value,c.value);t.getCurrProj().addTodo(e);let o=document.querySelector(".curr-proj-div");d(e,o)})),e.append(r,i,a,c,s),o.appendChild(e)},u=function(n){let e=document.createElement("div");e.classList.add("curr-proj-div");let r=document.createElement("h4");e.appendChild(r),r.innerText=n.getTitle();let t=n.getTodoList();for(let n=0;n<t.length;n++)d(t[n],e);o.appendChild(e);let i=o.querySelector(".btn-add-todo");i&&o.removeChild(i);let a=document.createElement("button");a.classList.add("btn-add-todo"),a.innerText="+",a.addEventListener("click",l),o.appendChild(a)};return{renderTodos:u,newProjForm:function(){let n=document.createElement("input"),t=document.createElement("button");t.innerText="+",t.addEventListener("click",(()=>{let o=n.value,i=e(o);r.removeChild(n),r.removeChild(t),a(i),c(i)})),r.appendChild(n),r.appendChild(t)},addProjToList:a,renderNav:function(){for(let n=0;n<i.length;n++)c(i[n])}}})();var i=r(379),a=r.n(i),c=r(28);a()(c.Z,{insert:"head",singleton:!1}),c.Z.locals;let d=n("smoke weed","420 blaze it","every day",1),s=e("default");o.addProjToList(s),o.renderNav(),s.addTodo(d),t.setCurrProj(s),o.renderTodos(s),document.querySelector(".btn-add-project").addEventListener("click",o.newProjForm)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,